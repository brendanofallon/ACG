<!--  This input file introduces the structure required for Metropolis-coupling (multiple
 	  chains with heating, aka MC3). A type of object (of class mcmc.mc3.MC3) is created 
 	  that wraps the usual MCMC object and runs multiple chains in parallel on seperate threads. -->
<ACG>

<!-- A random number generator is essential and will be used by all classes. -->
<!-- A initial random seed can be specified with the seed="XXX" attribute -->
<RandomSource class="math.RandomSource" />

<!-- Sequence data is provided in the form of an alignment, which can refer to a file -->
<!-- or contain a list of sequences -->
<alignment class="sequence.Alignment" filename="doc/example5.fas" />


<!--  The Ancestral Recombination Graph (ARG) that is the central feature of the analysis -->
<ARG class="arg.ARG" frequency="30.0">
	<alignment />
	<modifiers class="list">
		<recombAddRemove class="modifier.RecombAddRemove"/>
		<rootHeight class="modifier.RootHeightModifier" />
		<nodeHeight class="modifier.NodeHeightModifier"/>
		<swapper class="modifier.SubtreeSwap" />
		<wideSwap class="modifier.WideSwap" />
		<shifter class="modifier.BreakpointShifter" />
		<bpSwap class="modifier.BreakpointSwapper" />
	</modifiers>
</ARG>




<!--  =====================  Mutation model and data likelihood   =====================  --> 

<!-- The F84 model of mutation  -->
<mutationModel class="dlCalculation.substitutionModels.F84Matrix">
	<stationaries class="dlCalculation.substitutionModels.BaseFrequencies" frequency="0.1" stationaries="0.25 0.25 0.25 0.25" >
		<stationariesMod class="modifier.DirichletModifier" />
	</stationaries>
	<kappaY class="parameter.DoubleParameter" name="kappaY" frequency="0.1" value="2.0" lowerBound="0.5" upperBound="500">
		<kappaYMod class="modifier.SimpleModifier" />
	</kappaY>
</mutationModel>

<!--  A likelihood component that computes the probability of observing the data conditional on the ARG
	  At minimum, it needs references to the mutation model, the ARG, and the data matrix -->
<DataLikelihood class="dlCalculation.DataLikelihood"> 
	<mutationModel />
	<ARG />
</DataLikelihood>



<!--  =====================  Coalescent model and likelihood   =====================  --> 

<!--  Parameter specifying (constant) population size (theta / 2.0)  -->
<constantPopSize class="coalescent.ConstantPopSize" frequency="1.0" value="1">
	<popSizeScaler class="modifier.ScaleModifier"/>
</constantPopSize>

<!-- Simple, constant recombination rate across sites -->
<constantRecRate class="coalescent.ConstantRecombination" value="1">
	<recRateScaler class="modifier.ScaleModifier"/>
</constantRecRate>

	
<!-- Exponential prior on the recombination rate with a mean of 25 -->
<!-- The prior helps to confine the ARGs with a reasonable number of recombinations -->
<RecRatePrior class="priors.ExponentialPrior" mean="25">
	<constantRecRate />
</RecRatePrior>

<!-- A likelihood object specifying the probability of observing the ARG  -->
<coalescentLikelihood class="coalescent.CoalescentLikelihood">
	<constantPopSize />
	<constantRecRate />
	<ARG />
</coalescentLikelihood>





<!--   =========================   Logging and output  ==========================  --> 

<!-- A logger that tracks properties of the likelihoods and parameters in the MCMC -->
<statelogger class="logging.StateLogger" filename="example5.log" frequency="5000" echoToScreen="true" />

<!-- a logger that tracks the distribution of TMRCA (root height of mARGinal trees) along the sequence -->
<rootHeightLogger class="logging.RootHeightDensity" filename="example5_rootHeight.txt" frequency="5000" burnin="100000">
	<ARG />
</rootHeightLogger>




<!-- =========================      Markov chain and MCMCMC   =============================    --> 
<!-- To use Metropolis-Coupling (multiple chains with heating), create a Markov chain with two
	new features. First, be sure to add the run="false" attribute to the element so the
	chain won't begin to run right away. Second, don't add any loggers to the chain. All
	loggers should be added to the next (mc3) element -->
<mc class="mcmc.MCMC" length="1000000" run="false">
	<parameters class="list">
		<constantPopSize />
		<constantRecRate />
		<stationaries />
		<kappaY />
		<ARG />  
	</parameters>
	<likelihoodComponents class="list">
		<RecRatePrior />
		<coalescentLikelihood />
		<DataLikelihood />
	</likelihoodComponents>
</mc>

<!-- This object encapsulates multiple chains in a Metropolis-Coupled Markov chain
 	Monte Carlo (MCMCMC or MC3) analysis. It requires attributes describing the length of the run,
 	the number of simultaneous chains to use, and the number of CPU threads to utilize. -->
<mc3 class="mcmc.mc3.MC3" length="1000000" chains="4" threads="4" >
	<mc />
	
	<!-- Heating strategy. This is an 'adaptive' strategy that changes the amount of heating 
		to ensure good mixing of chains. Chain i is heated by amount 1.0 / exp(-lambda * i), where
		lambda is adjusted as the run progresses -->
	<chainHeats class="mcmc.mc3.ExpChainHeats" numberOfChains="4">
		<lambdaParam class="parameter.DoubleParameter" value="0.001" lowerBound="1e-9" upperBound="0.5">
			<lambdaMod class="modifier.ScaleModifier" />
		</lambdaParam>
	</chainHeats>
	
	<!-- List of loggers is added down here, not to the chain -->
	<loggers class="list">
		<statelogger />
		<rootHeightLogger />
	</loggers>
</mc3>

</ACG>
