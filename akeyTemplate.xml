<!--  Another example ACG input file. This one is very similar to the example1, but instead
 	of containing the alignment, it references an external file, example2.fas, that stores
 	the sequences. It also uses the TN93 model of mutation, which includes two free
 	parameters, KappaR and KappaY, and estimates base frequencies from the data as well. 
 	
 	In addition to the usual 'StateLogger', which tracks parameter values, this file also
 	shows how you can define loggers that track the TMRCA along the length of the sequence
 	(via the rootHeightLogger, defined in the class logging.RootHeightDensity), the 
 	positions of recombination breakpoints using the bpLocLogger in logging.BreakpointLocation, 
 	and the "marginal trees" - the trees ancestral to a single site, using the MarginalTreeLogger
 	located in logging.MarginalTreeLogger -->
<ACG>

<!-- A random number generator is essential and will be used by all classes. -->
<!-- A initial random seed can be specified with the seed="XXX" attribute -->
<RandomSource class="math.RandomSource" />

<!-- Sequence data is provided in the form of an alignment, which can refer to a file -->
<!-- or contain a list of sequences -->
<alignment class="sequence.Alignment" filename="akeyTemplate.fas">
</alignment>


<!--  The Ancestral Recombination Graph (ARG) that is the central feature of the analysis. 
 It's a type of Parameter, and so has a frequency specifying how often new values are 
 proposed by the MCMC machinery. It also has a list of modifiers (proposal kernels) that
 propose new values	 -->
<ARG class="arg.ARG" frequency="30.0">
	<alignment />
	<modifiers class="list">
		<recombAddRemove class="modifier.RecombAddRemove"/>
		<rootHeight class="modifier.RootHeightModifier" />
		<nodeHeight class="modifier.NodeHeightModifier"/>
		<swapper class="modifier.SubtreeSwap" />
		<wideSwap class="modifier.WideSwap" />
		<shifter class="modifier.BreakpointShifter" />
		<bpSwap class="modifier.BreakpointSwapper" />
	</modifiers>
</ARG>




<!--==========================   Mutation model and data likelihood  =========================== --> 

<!-- The TN93 mutation model has one more free parameter than the F84 model  -->
<mutationModel class="dlCalculation.substitutionModels.TN93Matrix">
	<stationaries class="dlCalculation.substitutionModels.BaseFrequencies" stationaries="0.25 0.25 0.25 0.25" >
		<stationariesMod class="modifier.DirichletModifier" />
	</stationaries>
	<KappaR class="parameter.DoubleParameter" name="KappaR" value="2.0" lowerBound="0.5" upperBound="500">
		<KappaRMod class="modifier.SimpleModifier" />
	</KappaR>
	<KappaY class="parameter.DoubleParameter" name="KappaY" value="2.0" lowerBound="0.5" upperBound="500">
		<KappaYMod class="modifier.SimpleModifier" />
	</KappaY>
</mutationModel>

<!--  A likelihood component that computes the probability of observing the data conditional on the ARG
	  At minimum, it needs references to the mutation model and the ARG-->
<DataLikelihood class="dlCalculation.DataLikelihood"> 
	<mutationModel />
	<ARG />
</DataLikelihood>




<!-- ============================   Coalescent model and likelihood  ======================== --> 

<!--  Parameter specifying population size (theta / 2.0)  -->
<PopSize class="coalescent.ConstantPopSize" frequency="1.0" value="1.0">
	<popSizeScaler class="modifier.ScaleModifier"/>
</PopSize>

<!-- Simple, constant recombination rate across sites -->
<RecRate class="coalescent.ConstantRecombination" value="1.0">
	<recRateScaler class="modifier.ScaleModifier"/>
</RecRate>

<!-- Place an exponential prior on the recombination rate with a mean of 25 -->
<!-- The prior helps to confine the ARGs with a reasonable number of recombinations -->
<RecRatePrior class="priors.ExponentialPrior" mean="25">
	<RecRate />
</RecRatePrior>

<!-- A likelihood object specifying the probability of observing the ARG  -->
<coalescentLikelihood class="coalescent.CoalescentLikelihood">
	<PopSize />
	<RecRate />
	<ARG />
</coalescentLikelihood>





<!-- ==============================    Logging and output	=============================== --> 

<!-- A logger that tracks properties of the likelihoods and parameters in the MCMC -->
<statelogger class="logging.StateLogger" filename="akey.log" frequency="5000" echoToScreen="true" />

<!-- A logger that tracks the position of recombination breakpoints along the sequence -->
<bpLocLogger class="logging.BreakpointDensity" filename="akey_bp.txt" frequency="5000" burnin="5000000">
	<ARG />  
</bpLocLogger>

<!-- a logger that tracks the distribution of TMRCA (root height of mARGinal trees) along the sequence -->
<rootHeightLogger class="logging.RootHeightDensity" filename="akey_rootHeight.txt" frequency="5000" burnin="5000000">
	<ARG />
</rootHeightLogger>

<lastARG class="logging.LastARGLogger" filename="akey_lastarg.xml"> 
	<ARG />
</lastARG>

<!-- =============================    Markov chain   ============================== --> 

<mc class="mcmc.MCMC" length="10000000" run="false">
	<parameters class="list">
		<PopSize />
		<RecRate />
		<stationaries />
		<KappaR />
		<KappaY />
		<ARG />  
	</parameters>
	<likelihoodComponents class="list">
		<RecRatePrior />
		<coalescentLikelihood />
		<DataLikelihood />
	</likelihoodComponents>
</mc>


<mc3 class="mcmc.mc3.MC3" length="10000000" chains="4" threads="4" >
	<mc />
	
	<!-- Heating strategy. This is an 'adaptive' strategy that changes the amount of heating 
		to ensure good mixing of chains. Chain i is heated by amount 1.0 / exp(-lambda * i), where
		lambda is adjusted as the run progresses -->
	<chainHeats class="mcmc.mc3.ExpChainHeats" numberOfChains="4">
		<lambdaParam class="parameter.DoubleParameter" value="0.001" lowerBound="1e-9" upperBound="0.5">
			<lambdaMod class="modifier.ScaleModifier" />
		</lambdaParam>
	</chainHeats>
	
	<!-- List of loggers is added down here, not to the chain -->
<loggers class="list">
		<statelogger />
		<bpLocLogger />
		<rootHeightLogger />
		<lastARG />
	</loggers>
</mc3>

</ACG>
